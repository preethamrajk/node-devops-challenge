#####Untested#####

trigger:
- feature/devops
- master

variables:
  acrServiceConnection: '7f3211ce-dbb6-4f46-864b-d3f5576c156c'
  subscription: 'Pay-As-You-Go (91d6fdb8-f407-4cef-8a58-6bb51f827ce5)'
  imageRepository: 'nodeapp'
  containerRegistry: 'colesdevopsregistry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'
  terraformstoragerg: 'platform-dev'
  terraformstorageaccount: 'pccolesdev'
  storagekey: 'PipelineWillGetThisValueRuntime'
  appservicename: 'frontend'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(acrServiceConnection)
        tags: |
          $(tag)
          
    - task: CopyFiles@2
      displayName: 'Copy Terraform files to artifacts'
      inputs:
        SourceFolder: Terraform
        TargetFolder: '$(build.artifactstagingdirectory)/Terraform'
        
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        
- stage: Deploy
  dependsOn: Build
  displayName: Deploy to ACI  
  jobs:
  - job: Deploy 
    steps:
      - task: AzureCLI@1
        displayName: 'Azure CLI to deploy required Azure resources'
        inputs:
          azureSubscription: $(subscription)
          scriptLocation: inlineScript
          inlineScript: |
           # this will create Azure resource group
           call az group create --location westus --name $(terraformstoragerg)
           
           call az storage account create --name $(terraformstorageaccount) --resource-group $(terraformstoragerg) --location westus --sku Standard_LRS
           
           call az storage container create --name terraform --account-name $(terraformstorageaccount)
           
           call az storage account keys list -g $(terraformstoragerg) -n $(terraformstorageaccount)
           
        
      - task: AzurePowerShell@3
        displayName: 'Azure PowerShell script to get the storage key'
        inputs:
          azureSubscription: $(subscription)
          ScriptType: InlineScript
          Inline: |
           # Using this script we will fetch storage key which is required in terraform file to authenticate backend storage account
           
           $key=(Get-AzureRmStorageAccountKey -ResourceGroupName $(terraformstoragerg) -AccountName $(terraformstorageaccount)).Value[0]
           
           Write-Host "##vso[task.setvariable variable=storagekey]$key"
          azurePowerShellVersion: LatestVersion
              
      - task: qetza.replacetokens.replacetokens-task.replacetokens@3
        displayName: 'Replace tokens in terraform file'
        inputs:
          targetFiles: '**/*.tf'
          escapeType: none
          tokenPrefix: '__'
          tokenSuffix: '__'
          
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: 'Install Terraform 0.12.3'
      
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        displayName: 'Terraform : init'
        inputs:
          workingDirectory: '$(System.DefaultWorkingDirectory)/_Terraform-CI/drop/Terraform'
          backendServiceArm: $(subscription)
          backendAzureRmResourceGroupName: '$(terraformstoragerg)'
          backendAzureRmStorageAccountName: '$(terraformstorageaccount) '
          backendAzureRmContainerName: asas
          backendAzureRmKey: terraform.tfstate
    
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        displayName: 'Terraform : plan'
        inputs:
          command: plan
          workingDirectory: '$(System.DefaultWorkingDirectory)/_Terraform-CI/drop/Terraform'
          environmentServiceNameAzureRM: $(subscription)
          backendAzureRmResourceGroupName: '$(terraformstoragerg)'
          backendAzureRmStorageAccountName: '$(terraformstorageaccount) '
          backendAzureRmContainerName: terraform
          backendAzureRmKey: '$(storagekey)'
          
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        displayName: 'Terraform : apply -auto-approve'
        inputs:
          command: apply
          workingDirectory: '$(System.DefaultWorkingDirectory)/_Terraform-CI/drop/Terraform'
          commandOptions: '-auto-approve'
          environmentServiceNameAzureRM: $(subscription)
          backendAzureRmResourceGroupName: '$(terraformstoragerg)'
          backendAzureRmStorageAccountName: '$(terraformstorageaccount) '
          backendAzureRmContainerName: terraform
          backendAzureRmKey: '$(storagekey)'
                    
      - task: AzureWebAppContainer@1
        displayName: 'Azure Web App on Container Deploy: $(appservicename)'
        inputs:
          azureSubscription: $(subscription)
          appName: '$(appservicename)'
          containers: 'colesdevopsregistry.azurecr.io/nodeapp:$(Build.BuildId)'
          appSettings: '-Port 8080'

